#!/usr/bin/env node
'use strict';
const program = require('commander');
const path = require('path');
const fs = require('fs-extra');
const pathExists = require('path-exists').sync;
const delib = require('./../index');
const config = require('./../src/config/config');
const optionActions = require('./../src/cli/optionactions');
const help = require('./../src/cli/help');
const info = require('./../src/cli/info');
const contracts = require('./../src/cli/contracts');

program
  .version('4.1.14')
  .usage('[options][command][options]');

/** Initializes DeLib by creating a configuration file and the contracts folder. */
program
  .command('init')
  .description('Create the Delib project structure: addresses/, built/, contracts/, delib.js')
  .option('-c --config', 'Only create the config file delib.js')
  .action((options) => {
    const configPath = path.join(process.cwd(), 'delib.js');

    const contractsPath = config.default ? path.join(process.cwd(), './contracts') : path.join(process.cwd(), config.paths.contract);
    const builtPath = config.default ? path.join(process.cwd(), './built') : path.join(process.cwd(), config.paths.built);
    const addressPath = config.default ? path.join(process.cwd(), './addresses') : path.join(process.cwd(), config.paths.address);

    let status = false;

    if (!pathExists(configPath)) {
      const defaultConfig = fs.readFileSync(path.join(__dirname, '/../src/config/default.js'));
      fs.writeFileSync(configPath, defaultConfig);
      console.log('Created configuration file: delib.js');
      status = true;
    }

    if (!options.config) {
      if (!pathExists(contractsPath)) {
        fs.mkdirSync(contractsPath);
        console.log('Created contracts folder at', config.paths.contract);
        status = true;
      }

      if (!pathExists(builtPath)) {
        fs.mkdirSync(builtPath);
        console.log('Created built contracts folder at', config.paths.built);
        status = true;
      }

      if (!pathExists(addressPath)) {
        fs.mkdirSync(addressPath);
        console.log('Created contract addresses folder at', config.paths.address);
        status = true;
      }
    }

    if (status === false) {
      console.log('Already created project');
    }
  });

/** Build a Solidity contract from paths in delib configuration file. Default is './contracts/' */
program
  .command('build [files...]')
  .alias('bu')
  .description('Build a Solidity contract')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-o --contract <path>', 'Relative path to contracts folder')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .action((files, options) => {
    options = optionActions(options, 'none');

    let contractPaths = [];
    for (let i = 0; i < files.length; i++) {
      const contractPath = path.join(config.projectRoot, delib.contracts.paths.contract, files[i] + '.sol');
      if (!pathExists(contractPath)) {
        console.log('');
        console.log('  \'' + files[i] + '\' is not a valid contract at:', contractPath);
        console.log('');
        return;
      }
      contractPaths.push(contractPath);
    }

    contractPaths = contractPaths.length === 1 ? contractPaths[0] : contractPaths;

    console.log('Building: ', contractPaths);

    delib.build(files)
      .then((contracts) => {
        // console.log('Built path:', path.join(config.projectRoot, delib.contracts.paths.built));
        console.log('Contracts built:', contracts.join(', '));
        delib.closeIPC();
      })
      .catch(err => {
        console.log(err);
        delib.closeIPC();
      });
  });

/** Deploy a Solidity contract from paths in delib configuration file. Default is './contracts/'. */
program
  .command('deploy <contractName> [args...]')
  .alias('de')
  .description('Deploy a built contract')
  .option('-i --account <index>', 'Account to use for transaction. Takes the account index')
  .option('-f --from <address>', 'From transaction option. Replaces --account')
  .option('-t --to <address>', 'To transaction option')
  .option('-v --value <ether>', 'Value transaction option in Ether. Converts the value to wei')
  .option('-g --gas <number>', 'Gas transaction option. Estimated if not given or set to 0')
  .option('-p --gasprice <number>', 'Gas price transaction option')
  .option('-n --nonce <number>', 'Nonce transaction option')
  .option('-m --maxgas <number>', 'Max gas allowed when estimating')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action((contractName, args, options) => {
    options = optionActions(options);

    // Check if built contract exists
    const builtPath = path.join(config.projectRoot, delib.contracts.paths.built, contractName + '.sol.js');
    if (!pathExists(builtPath)) {
      console.log('');
      console.log('  \'' + contractName + '\' is not a valid built contract at:', builtPath);
      console.log('');
      return;
    }

    console.log('Deploying:', builtPath);
    delib.deploy(contractName, args, options)
      .then(instance => {
        // console.log('Address path:', path.join(config.projectRoot, delib.contracts.paths.address));
        console.log('Contract address:', instance.address);
        delib.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.closeIPC();
      });
  });

/** Executes a deployed contract with specified method and provided arguments. */
program
  .command('exec <contractName> <method> [args...]')
  .description('Execute a contract method')
  .alias('ex')
  .option('-i --account <index>', 'Account to use for transaction. Takes the account index')
  .option('-f --from <address>', 'From transaction option. Replaces --account')
  .option('-t --to <address>', 'To transaction option.')
  .option('-v --value <ether>', 'Value transaction option in Ether. Converts the value to wei')
  .option('-g --gas <number>', 'Gas transaction option')
  .option('-p --gasprice <number>', 'Gas price transaction option')
  .option('-n --nonce <number>', 'Nonce transaction option')
  .option('-m --maxgas <number>', 'Max gas allowed when estimating')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .option('--call', 'Forces method execution with a call')
  .action((contractName, method, args, options) => {
    const callOption = options.call; // Whether or not to call transaction
    options = optionActions(options);

    // Check if built contract exists
    const builtPath = path.join(config.projectRoot, delib.contracts.paths.built, contractName + '.sol.js');
    if (!pathExists(builtPath)) {
      console.log('');
      console.log('  \'' + contractName + '\' is not a valid built contract at:', builtPath);
      console.log('');
      return;
    }

    // Check if contract method exists. The returned contract instance has custom methods. The actual methods are __methodName
    const contractInstance = delib.exec(contractName);

    const abis = contractInstance.abi;

    function checkMethod(method, abis) {
      for (let i = 0; i < abis.length; i++) {
        if (abis[i].name === method && abis[i].type === 'function') {
          return true;
        }
      }
      return false;
    }

    if (!checkMethod(method, abis)) {
      console.log('');
      console.log('  \'' + method + '\' is not a valid', contractName, 'method');
      console.log('');
      return;
    }

    args.push(options);
    const methodPromise = !callOption ? contractInstance[method].apply(this, args) : contractInstance.call[method].apply(this, args);

    methodPromise
      .then(txRes => {
        console.log('Response:', txRes);
        delib.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.closeIPC();
      });

  });

/** Show the logs of a contract event. */
program
  .command('events <contractName> <eventName> [blocksBack]')
  .alias('ev')
  .description('Get the logs of an event')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action((contractName, eventName, blocksBack, options) => {
    optionActions(options);

    const builtPath = path.join(config.projectRoot, delib.contracts.paths.built, contractName + '.sol.js');
    if (!pathExists(builtPath)) {
      console.log('');
      console.log('  \'' + contractName + '\' is not a valid built contract at:', builtPath);
      console.log('');
      return;
    }

    // Check if event exists
    const contract = delib.builtContract(contractName);
    const contractAddress = delib.contracts.addresses.get(contractName);
    const contractInstance = contract.at(contractAddress);
    const abis = contractInstance.abi;

    function checkEvent(eventName, abis) {
      if (eventName === 'allEvents') return true;
      for (let i = 0; i < abis.length; i++) {
        if (abis[i].name === eventName && abis[i].type === 'event') {
          return true;
        }
      }
      return false;
    }

    if (!checkEvent(eventName, abis)) {
      console.log('');
      console.log('  \'' + eventName + '\' is not a valid', contractName, 'event');
      console.log('');
      return;
    }

    delib.eventsAt(contractName, contractAddress, eventName, blocksBack)
      .then(logs => {
        console.log('Event logs:');
        logs = logs.map(log => { return log.args; });
        console.log(logs);
        delib.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.closeIPC();
      });
  });

program
  .command('watch <contractName> <eventName>')
  .alias('wa')
  .description('Set up listener to watch for logs of an event')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action((contractName, eventName, options) => {
    optionActions(options);

    const builtPath = path.join(config.projectRoot, delib.contracts.paths.built, contractName + '.sol.js');
    if (!pathExists(builtPath)) {
      console.log('');
      console.log('  \'' + contractName + '\' is not a valid built contract at:', builtPath);
      console.log('');
      return;
    }

    // Check if event exists
    const contract = delib.builtContract(contractName);
    const contractAddress = delib.contracts.addresses.get(contractName);
    const contractInstance = contract.at(contractAddress);
    const abis = contractInstance.abi;

    function checkEvent(eventName, abis) {
      if (eventName === 'allEvents') return true;
      for (let i = 0; i < abis.length; i++) {
        if (abis[i].name === eventName && abis[i].type === 'event') {
          return true;
        }
      }
      return false;
    }

    if (!checkEvent(eventName, abis)) {
      console.log('');
      console.log('  \'' + eventName + '\' is not a valid', contractName, 'event');
      console.log('');
      return;
    }
    console.log('Watching for events:');
    delib.watchAt(contractName, contractAddress, eventName, (err, log) => {
      if (!err) {
        console.log(log.args);
      }
    });
  });

/** Retrieves a list of all contracts */
program
  .command('contracts')
  .description('Retrieves a list of all built contracts')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .action(contracts);

/** List a contracts info */
program
  .command('info <contractName>')
  .description('Show contract info (methods, events, address)')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action(info);

/** Set the address of a contract to call methods on */
program
  .command('set <contractName> <contractAddress>')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .description('Set the address of a contract to use')
  .action((contractName, contractAddress, options) => {
    optionActions(options);
    delib.contracts.addresses.set(contractName, contractAddress);
  });

/** Get the balance of a particular Ethereum account based on account index. */
program
  .command('balance <index> [denomination]')
  .description('Get the balance of an Ethereum account by its index')
  .option('-h --rpchost <value>', 'RPC host')
  .option('-r --rpcport <port>', 'RPC port')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .action((index, denomination, options) => {
    optionActions(options);
    if (delib.connectionType !== 'ipc') {
      const balance = delib.getBalance(index, denomination);
      console.log(balance);
    } else {
      delib.getBalance(index, denomination)
        .then(balance => {
          console.log(balance);
          delib.closeIPC();
        })
        .catch(err => {
          console.error(err);
          delib.closeIPC();
        });
    }
  });

/** Create a new Ethereum account. */
program
  .command('create <password>')
  .description('Create an Ethereum account')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .action((password, options) => {
    optionActions(options, 'ipc');
    delib.createAccount(password)
      .then(address => {
        console.log(address);
        delib.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.closeIPC();
      });
  });

/** Unlocks an Ethereum account. */
program
  .command('unlock <index> <password> [time]')
  .description('Unlock an Ethereum account')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .action((index, password, time, options) => {
    optionActions(options, 'ipc');
    time = time || 60 * 60 * 24;
    delib.unlockAccount(index, password, time)
      .then(bool => {
        delib.closeIPC();
      })
      .catch(err => {
        console.error(err);
        delib.closeIPC();
      });
  });

/** Additional help */
program.on('--help', help);

program.parse(process.argv);

/** Catch invalid commands */
if (process.argv.length >= 3 && program._events[process.argv[2]] === undefined) {
  console.log('');
  console.log('  delib:  \'' + process.argv[2] + '\' is not a command. See \'delib --help\'.');
  console.log('');
}

/** Default output is help */
if (process.argv.length <= 2) {
  program.outputHelp();
}
