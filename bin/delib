#!/usr/bin/env node
'use strict';
const program = require('commander');
const path = require('path');
const fs = require('fs-extra');
const pathExists = require('path-exists').sync;
const delib = require('./../index');
const config = require('./../src/config/config');
const optionActions = require('./../src/cli/optionactions');
const help = require('./../src/cli/help');
const info = require('./../src/cli/info');
const contracts = require('./../src/cli/contracts');

program
  .version('6.2.4')
  .usage('[options][command][options]');

/** Initializes DeLib by creating a configuration file and the contracts folder. */
program
  .command('init')
  .description('Create the Delib project structure: addresses/, built/, contracts/, delib.js')
  .option('-c --config', 'Only create the config file delib.js')
  .action((options) => {
    const configPath = path.join(process.cwd(), 'delib.js');

    const contractsPath = config.default ? path.join(process.cwd(), './contracts') : path.join(process.cwd(), config.paths.contract);
    const builtPath = config.default ? path.join(process.cwd(), './built') : path.join(process.cwd(), config.paths.built);
    const addressPath = config.default ? path.join(process.cwd(), './addresses') : path.join(process.cwd(), config.paths.address);

    let status = false;

    if (!pathExists(configPath)) {
      const defaultConfig = fs.readFileSync(path.join(__dirname, '/../src/config/default.js'));
      fs.writeFileSync(configPath, defaultConfig);
      console.log('Created configuration file: delib.js');
      status = true;
    }

    if (!options.config) {
      if (!pathExists(contractsPath)) {
        fs.mkdirSync(contractsPath);
        console.log('Created contracts folder at', config.paths.contract);
        status = true;
      }

      if (!pathExists(builtPath)) {
        fs.mkdirSync(builtPath);
        console.log('Created built contracts folder at', config.paths.built);
        status = true;
      }

      if (!pathExists(addressPath)) {
        fs.mkdirSync(addressPath);
        console.log('Created contract addresses folder at', config.paths.address);
        status = true;
      }
    }

    if (status === false) {
      console.log('Already created project');
    }
  });

/** Build a Solidity contract from paths in delib configuration file. Default is './contracts/' */
program
  .command('build [files...]')
  .alias('bu')
  .description('Build a Solidity contract')
  .option('-h --rpcpath [path]>', 'RPC path')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-w --wspath [path]', 'Path to ws port')
  .option('-o --contract <path>', 'Relative path to contracts folder')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .action((files, options) => {
    options = optionActions(options, 'none');

    if (files.length === 0) {
      files = fs.readdirSync(path.join(config.projectRoot, delib.paths.contract));
      files = files.filter(file => {
        return file.indexOf('.sol') >= 0;
      }).map(file => {
        return file.split('.').slice(0, -1).join('.')
      });
    }

    let contractPaths = [];
    for (let i = 0; i < files.length; i++) {
      const contractPath = path.join(config.projectRoot, delib.paths.contract, files[i] + '.sol');
      if (!pathExists(contractPath)) {
        console.log('');
        console.log('  \'' + files[i] + '\' is not a valid contract at:', contractPath);
        console.log('');
        return;
      }
      contractPaths.push(contractPath);
    }

    contractPaths = contractPaths.length === 1 ? contractPaths[0] : contractPaths;

    console.log('Compiling: ', contractPaths);

    delib.build(files)
      .then((contracts) => {
        // console.log('Built path:', path.join(config.projectRoot, delib.contracts.paths.built));
        console.log('Contracts compiled:', contracts.join(', '));
        process.exit();
        delib.closeIPC();
      })
      .catch(err => {
        console.log(err);
        process.exit();
        delib.closeIPC();
      });
  });

  /** Compile a Solidity contract from paths in delib configuration file. Default is './contracts/' */
  program
    .command('compile [files...]')
    .alias('cp')
    .description('Build a Solidity contract')
    .option('-h --rpcpath [path]>', 'RPC path')
    .option('-c --ipchost [path]', 'Relative path to IPC host')
    .option('-w --wspath [path]', 'Path to ws port')
    .option('-o --contract <path>', 'Relative path to contracts folder')
    .option('-b --built <path>', 'Relative path to built contracts folder')
    .action((files, options) => {
      options = optionActions(options, 'none');

      if (files.length === 0) {
        files = fs.readdirSync(path.join(config.projectRoot, delib.paths.contract));
        files = files.filter(file => {
          return file.indexOf('.sol') >= 0;
        }).map(file => {
          return file.split('.').slice(0, -1).join('.')
        });
      }

      let contractPaths = [];
      for (let i = 0; i < files.length; i++) {
        const contractPath = path.join(config.projectRoot, delib.paths.contract, files[i] + '.sol');
        if (!pathExists(contractPath)) {
          console.log('');
          console.log('  \'' + files[i] + '\' is not a valid contract at:', contractPath);
          console.log('');
          return;
        }
        contractPaths.push(contractPath);
      }

      contractPaths = contractPaths.length === 1 ? contractPaths[0] : contractPaths;

      console.log('Compiling: ', contractPaths);

      delib.build(files)
        .then((contracts) => {
          // console.log('Built path:', path.join(config.projectRoot, delib.contracts.paths.built));
          console.log('Contracts compiled:', contracts.join(', '));
          process.exit();
          delib.closeIPC();
        })
        .catch(err => {
          console.log(err);
          process.exit();
          delib.closeIPC();
        });
    });

/** Deploy a Solidity contract from paths in delib configuration file. Default is './contracts/'. */
program
  .command('deploy <contractName> [args...]')
  .alias('de')
  .description('Deploy a built contract')
  .option('-i --account <index>', 'Account to use for transaction. Takes the account index')
  .option('-f --from <address>', 'From transaction option. Replaces --account')
  .option('-t --to <address>', 'To transaction option')
  .option('-v --value <ether>', 'Value transaction option in Ether. Converts the value to wei')
  .option('-g --gas <number>', 'Gas transaction option. Estimated if not given or set to 0')
  .option('-p --gasprice <number>', 'Gas price transaction option')
  .option('-n --nonce <number>', 'Nonce transaction option')
  .option('-m --maxgas <number>', 'Max gas allowed when estimating')
  .option('-h --rpcpath [path]>', 'RPC path')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-w --wspath [path]', 'Path to ws port')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .option('-l --links <links>', 'Library contract addresses')
  .action((contractName, args, options) => {
    options = optionActions(options);

    let links;
    if (options.links) {
      const linksStr = options.links.replace(/'/g,'');
      let linksArr = [];

      if (linksStr.match(',')) {
        linksArr = linksStr.split(',');
        linksArr = linksArr.map(link => {
          return link.trim();
        }).map(link => {
          return link.split(' ');
        });
      } else {
        linksArr = [linksStr.split(' ')];
      }

      links = {};

      for (let i = 0; i < linksArr.length; i++) {
        links[linksArr[i][0]] = linksArr[i][1];
      }
    }

    // Check if built contract exists
    const builtPath = path.join(config.projectRoot, delib.paths.built, contractName + '.json');
    if (!pathExists(builtPath)) {
      console.log('');
      console.log('  \'' + contractName + '\' is not a valid built contract at:', builtPath);
      console.log('');
      return;
    }

    console.log('Deploying:', builtPath);
    delib.deploy(contractName, args, options, links)
      .then((contractInstance) => {
        // console.log('Address path:', path.join(config.projectRoot, delib.contracts.paths.address));
        console.log('Contract address:', contractInstance.address);
        process.exit();
        delib.closeIPC();
      })
      .catch(err => {
        console.error(err);
        process.exit();
        delib.closeIPC();
      });
  });

/** Executes a deployed contract with specified method and provided arguments. */
program
  .command('exec <contractName> <method> [args...]')
  .description('Execute a contract method')
  .alias('ex')
  .option('-i --account <index>', 'Account to use for transaction. Takes the account index')
  .option('-f --from <address>', 'From transaction option. Replaces --account')
  .option('-t --to <address>', 'To transaction option.')
  .option('-v --value <ether>', 'Value transaction option in Ether. Converts the value to wei')
  .option('-g --gas <number>', 'Gas transaction option')
  .option('-p --gasprice <number>', 'Gas price transaction option')
  .option('-n --nonce <number>', 'Nonce transaction option')
  .option('-m --maxgas <number>', 'Max gas allowed when estimating')
  .option('-h --rpcpath [path]>', 'RPC path')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-w --wspath [path]', 'Path to ws port')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .option('--call', 'Forces method execution with a call')
  .action((contractName, method, args, options) => {
    const callOption = options.call; // Whether or not to call transaction
    options = optionActions(options);

    // Check if built contract exists
    const builtPath = path.join(config.projectRoot, delib.paths.built, contractName + '.json');
    if (!pathExists(builtPath)) {
      console.log('');
      console.log('  \'' + contractName + '\' is not a valid built contract at:', builtPath);
      console.log('');
      return;
    }

    const contractAddress = delib.addresses.get(contractName, 0);

    // Check if contract method exists. The returned contract instance has custom methods. The actual methods are __methodName
    const contractInstance = delib.exec(contractName, contractAddress);
    const abis = contractInstance.abi ;
    function checkMethod(method, abis) {
      for (let i = 0; i < abis.length; i++) {
        if (abis[i].name === method && abis[i].type === 'function') {
          return true;
        }
      }
      return false;
    }

    if (!checkMethod(method, abis)) {
      console.log('');
      console.log('  \'' + method + '\' is not a valid', contractName, 'method');
      console.log('');
      return;
    }

    args.push(options);
    const methodPromise = !callOption ? contractInstance[method].apply(this, args) : contractInstance.call[method].apply(this, args);

    methodPromise
      .then(txRes => {
        console.log('Response:', txRes);
        process.exit();
        delib.closeIPC();
      })
      .catch(err => {
        console.error(err);
        process.exit();
        delib.closeIPC();
      });

  });

/** Show the logs of a contract event. */
program
  .command('events <contractName> <eventName>')
  .alias('ev')
  .description('Get the logs of an event. fromBlock deaults to 0 and toBlock defaults to latest')
  .option('-h --rpcpath [path]>', 'RPC path')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-w --wspath [path]', 'Path to ws port')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .option('-f --fromblock <number>', 'From block to get events from')
  .option('-t --toblock <number>', 'To block to get events from')
  .option('-t --blocksback <number>', 'Blocks back to get events from')
  .action((contractName, eventName, options) => {
    delib.init();

    optionActions(options, 'none');

    const builtPath = path.join(config.projectRoot, delib.paths.built, contractName + '.json');
    if (!pathExists(builtPath)) {
      console.log('');
      console.log('  \'' + contractName + '\' is not a valid built contract at:', builtPath);
      console.log('');
      return;
    }

    // Check if event exists
    const contract = delib._builtContractExec(contractName);
    const contractAddress = delib.addresses.get(contractName).address;

    const events = contract.events;
    function checkEvent(eventName, events) {
      for (let key in events) {
        if (key === eventName) {
          return true;
        }
      }

      return false;
    }

    if (!checkEvent(eventName, events)) {
      console.log('');
      console.log('  \'' + eventName + '\' is not a valid', contractName, 'event');
      console.log('');
      return;
    }

    if (options.blocksback) {
      delib.web3.eth.getBlockNumber()
        .then(blockNumber => {
          let fromBlock = blockNumber - options.blocksback;
          if (fromBlock < 0) fromBlock = 0;
          const toBlock = 'latest';
          const blockOptions = {fromBlock: fromBlock, toBlock: toBlock}

          delib.eventsAt(contractName, contractAddress, eventName, blockOptions)
            .then(logs => {
              console.log('Event logs:');
              console.log(logs);
              process.exit();
              delib.closeIPC();
            })
            .catch(err => {
              console.error(err);
              process.exit();
              delib.closeIPC();
            });
        })
    } else {
      const blockOptions = {fromBlock: options.fromblock, toBlock: options.toblock}

      console.log('blockOptions', blockOptions);
      delib.eventsAt(contractName, contractAddress, eventName, blockOptions)
        .then(logs => {
          console.log('Event logs:');
          console.log(logs);
          process.exit();
          delib.closeIPC();
        })
        .catch(err => {
          console.error(err);
          process.exit();
          delib.closeIPC();
        });
    }
  });

program
  .command('watch <contractName> <eventName>')
  .alias('wa')
  .description('Set up listener to watch for logs of an event')
  .option('-h --rpcpath [path]>', 'RPC path')
  .option('-c --ipchost [path]', 'Relative path to IPC host')
  .option('-w --wspath [path]', 'Path to ws port')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action((contractName, eventName, options) => {
    optionActions(options);
    delib.initws();
    const builtPath = path.join(config.projectRoot, delib.paths.built, contractName + '.json');
    if (!pathExists(builtPath)) {
      console.log('');
      console.log('  \'' + contractName + '\' is not a valid built contract at:', builtPath);
      console.log('');
      return;
    }

    // Check if event exists
    const contract = delib._builtContractExec(contractName);

    const contractAddress = delib.addresses.get(contractName).address;
    const events = contract.events;

    function checkEvent(eventName, events) {
      for (let key in events) {
        if (key === eventName) {
          return true;
        }
      }

      return false;
    }

    if (!checkEvent(eventName, events)) {
      console.log('');
      console.log('  \'' + eventName + '\' is not a valid', contractName, 'event');
      console.log('');
      return;
    }

    console.log('Watching for events:');
    delib.watchAt(contractName, contractAddress, eventName, (err, log) => {
      if (!err) {
        console.log(log);
      }
    });
  });

/** Retrieves a list of all accounts */
program
  .command('accounts')
  .description('Retrieves a list of all accounts')
  .action(options => {
    optionActions(options);
    delib.getAccounts()
      .then(accounts => {
        console.log('Index', 'Account');
        for (let i = 0; i < accounts.length; i++) {
          if (i < 10) {
            console.log(i, '   ', accounts[i])
          } else if (i >= 10 && i < 100) {
            console.log(i, '  ', accounts[i])
          } else if (i >= 100 && i < 1000) {
            console.log(i, ' ', accounts[i])
          } else {
            console.log(i, ' ', accounts[i]);
          }
        }
      })
      .catch(err => {
        console.error(err);
      })
  });

/** Retrieves a list of all contracts */
program
  .command('contracts')
  .description('Retrieves a list of all built contracts')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .action(contracts);

/** List a contracts info */
program
  .command('info <contractName>')
  .description('Show contract info (methods, events, address)')
  .option('-b --built <path>', 'Relative path to built contracts folder')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .action(info);

/** Set the address of a contract to call methods on */
program
  .command('set <contractName> <contractAddress>')
  .option('-a --address <path>', 'Relative path to addresses folder')
  .description('Set the address of a contract to use')
  .action((contractName, contractAddress, options) => {
    optionActions(options);
    delib.addresses.set(contractName, contractAddress);
  });


/** Additional help */
program.on('--help', help);

program.parse(process.argv);

/** Catch invalid commands */
if (process.argv.length >= 3 && program._events[process.argv[2]] === undefined) {
  console.log('');
  console.log('  delib:  \'' + process.argv[2] + '\' is not a command. See \'delib --help\'.');
  console.log('');
}

/** Default output is help */
if (process.argv.length <= 2) {
  program.outputHelp();
}
